type: edu
files:
- name: fibonacci_number.py
  visible: true
  placeholders:
  - offset: 230
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 230
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def fibonacci_number_naive(n):
        assert 0 <= n <= 45

        if n <= 1:
            return n

        return fibonacci_number_naive(n - 1) + fibonacci_number_naive(n - 2)


    def fibonacci_number(n):
        assert 0 <= n <= 45

        type here


    if __name__ == '__main__':
        input_n = int(input())
        print(fibonacci_number(input_n))
  learner_created: false
- name: fibonacci_number_unit_tests.py
  visible: true
  placeholders:
  - offset: 334
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 334
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from fibonacci_number import fibonacci_number, fibonacci_number_naive


    class TestFibonacciNumber(unittest.TestCase):
        def test_small(self):
            for n in range(8):
                self.assertEqual(fibonacci_number(n), fibonacci_number_naive(n))

        def test_large(self):
            for (n, Fn) in [(30, 832040), (35, type here), (40, 102334155)]:
                self.assertEqual(fibonacci_number(n), Fn)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: logo.png
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from fibonacci_number import fibonacci_number


    def fibonacci_number_reference(n):
        assert 0 <= n <= 40
        if n <= 1:
            return n

        previous, current = 0, 1
        for _ in range(n - 1):
            previous, current = current, previous + current

        return current


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("fibonacci_number_unit_tests.py")

        all_tests_passed = True
        for x in range(41):
            if fibonacci_number(x) != fibonacci_number_reference(x):
                all_tests_passed = False
                failed("Wrong answer for n={}".format(x))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions
status: Unchecked
record: -1
