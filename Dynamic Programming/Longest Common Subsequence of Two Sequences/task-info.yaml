type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from lcs2 import lcs2


    def reference(a, b):
        n, m = len(a), len(b)
        t = [[0] * (m + 1) for _ in range(n + 1)]

        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if a[i - 1] == b[j - 1]:
                    t[i][j] = max(t[i - 1][j - 1] + 1, t[i][j - 1], t[i - 1][j])
                else:
                    t[i][j] = max(t[i - 1][j], t[i][j - 1])

        return t[n][m]


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("lcs2_unit_tests.py")

        all_tests_passed = True

        for first, second in (
            ([1, 2] * 50, [2, 1] * 50),
            ([0] * 10, [i % 3 for i in range(10)]),
        ):
            if lcs2(first, second) != reference(first, second):
                all_tests_passed = False
                failed("Wrong answer for {} and {}".format(first, second))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: lcs2_unit_tests.py
  visible: true
  placeholders:
  - offset: 426
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 426
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from lcs2 import lcs2


    class LCS2(unittest.TestCase):
        def test(self):
            for first_sequence, second_sequence, answer in (
                ((1, 2), (2, 1), 1),
                ((1, 2), (3, 4), 0),
                ([17] * 50, [17] * 25, 25),
                ([1] * 100, [1] * 100, 100),
                ((2, 7, 5), (2, 5), 2),
                ((7, ), (1, 2, 3, 4), 0),
                ((2, 7, 8, 3), (5, 2, 8, 7), 2),
                type here
            ):
                self.assertEqual(lcs2(first_sequence, second_sequence), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: lcs2.py
  visible: true
  placeholders:
  - offset: 137
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 137
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def lcs2(first_sequence, second_sequence):
        assert len(first_sequence) <= 100
        assert len(second_sequence) <= 100

        type here


    if __name__ == '__main__':
        n = int(input())
        a = list(map(int, input().split()))
        assert len(a) == n

        m = int(input())
        b = list(map(int, input().split()))
        assert len(b) == m

        print(lcs2(a, b))
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
