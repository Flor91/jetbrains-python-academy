type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from arithmetic_expression import find_maximum_value


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("arithmetic_expression_unit_tests.py")

        all_tests_passed = True

        for s, answer in (
            ("5", 5),
            ("2+3", 5),
            ("2-3", -1),
            ("5-8+7*4-8+9", 200),
            ("2-3", -1),
            ("9*9*9*9", 9 * 9 * 9 * 9),
            ("1-1", 0),
            ("7", 7),
            ("1+2+3+4+5+6+7+8+9", 45),
        ):
            if find_maximum_value(s) != answer:
                all_tests_passed = False
                failed("Wrong answer for {}".format(s))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: arithmetic_expression_unit_tests.py
  visible: true
  placeholders:
  - offset: 282
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 282
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from arithmetic_expression import find_maximum_value


    class ArithmeticExpression(unittest.TestCase):
        def test(self):
            for s, answer in (
                ("5", 5),
                ("2+3", 5),
                ("2-3", -1),
                ("5-8+7*4-8+9", 200),
                type here
            ):
                self.assertEqual(find_maximum_value(s), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: arithmetic_expression.py
  visible: true
  placeholders:
  - offset: 85
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 85
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def find_maximum_value(dataset):
        assert 1 <= len(dataset) <= 29

        type here


    if __name__ == "__main__":
        print(find_maximum_value(input()))
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
