type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class ChattyBotTest(StageTest):
        def generate(self) -> List[TestCase]:
            stdin = "Marry\n1\n0\n5\n10"
            for i in range(10):
                stdin += f'\n{i}'
            return [
                TestCase(stdin=stdin, attach=("Marry", 40, 10))
            ]

        def check(self, reply: str, clue: Any) -> CheckResult:
            lines = reply.strip().splitlines()
            length = 9 + clue[2] + 1
            if len(lines) <= length:
                return CheckResult.wrong(
                    f"You should output at least {length} lines " +
                    f"(for the count number {clue[2]}).\n" +
                    f"Lines found: {len(lines)}"
                    f"Your output:\n"
                    f"{reply.strip()}"
                )

            line_with_name = lines[3].lower()
            name = clue[0].lower()

            if name not in line_with_name:
                return CheckResult.wrong(
                    "The name was " + clue[0] + "\n" +
                    "But the 4-th line was:\n" +
                    "\"" + lines[3] + "\"\n\n" +
                    "4-th line should contain a name of the user"
                )

            line_with_age = lines[6].lower()
            age = str(clue[1])

            if age not in line_with_age:
                return CheckResult.wrong(
                    "Can't find a correct age! " +
                    "Maybe you calculated the age wrong?\n\n" +
                    "Your line with age: \n" + "\"" + lines[6] + "\""
                )

            for i in range(clue[2] + 1):
                num_line = lines[i + 8].strip().replace(' ', '')
                actual_num = f'{i}!'

                if num_line != actual_num:
                    return CheckResult.wrong(
                        f"Expected {i + 8}-th line: \n" +
                        f"\"{actual_num}\"\n" +
                        f"Your {i + 8}-th line: \n" +
                        f"\"{num_line}\""
                    )

            last_line = lines[-1]
            if "Congratulations, have a nice day!" != last_line:
                return CheckResult.wrong(
                    "Your last line should be:\n" +
                    "\"Congratulations, have a nice day!\"\n" +
                    "Found:\n" +
                    f"\"{last_line}\""
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        ChattyBotTest('bot.bot').run_tests()
  learner_created: false
- name: bot/bot.py
  visible: true
  text: |
    def greet(bot_name, birth_year):
        print('Hello! My name is ' + bot_name + '.')
        print('I was created in ' + birth_year + '.')


    def remind_name():
        print('Please, remind me your name.')
        name = input()
        print('What a great name you have, ' + name + '!')


    def guess_age():
        print('Let me guess your age.')
        print('Enter remainders of dividing your age by 3, 5 and 7.')

        rem3 = int(input())
        rem5 = int(input())
        rem7 = int(input())
        age = (rem3 * 70 + rem5 * 21 + rem7 * 15) % 105

        print("Your age is " + str(age) + "; that's a good time to start programming!")


    def count():
        print('Now I will prove to you that I can count to any number you want.')

        num = int(input())
        curr = 0
        while curr <= num:
            print(curr, '!')
            curr = curr + 1


    def test():
        print("Let's test your programming knowledge.")
        # write your code here
        print('Completed, have a nice day!')


    def end():
        print('Congratulations, have a nice day!')


    greet('Aid', '2020')  # change it as you need
    remind_name()
    guess_age()
    count()
    # ...
    end()
  learner_created: false
feedback_link: https://hyperskill.org/projects/97/stages/538/implement
status: Solved
record: -1
