type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: majority_element.py
  visible: true
  placeholders:
  - offset: 268
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 268
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def majority_element_naive(elements):
        assert len(elements) <= 10 ** 5
        for e in elements:
            if elements.count(e) > len(elements) / 2:
                return 1

        return 0


    def majority_element(elements):
        assert len(elements) <= 10 ** 5
        type here


    if __name__ == '__main__':
        input_n = int(input())
        input_elements = list(map(int, input().split()))
        assert len(input_elements) == input_n
        print(majority_element(input_elements))
  learner_created: false
- name: majority_element_unit_tests.py
  visible: true
  placeholders:
  - offset: 296
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 296
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from majority_element import majority_element, majority_element_naive


    class TestMajorityElement(unittest.TestCase):
        def test_small(self):
            for elements in [
                [7, 2, 7],
                [7, 8, 9],
                [2, 3, 2, 3],
                [1, 2, 3, 4],
                type here
            ]:
                self.assertEqual(
                    majority_element(list(elements)),
                    majority_element_naive(elements)
                )

        def test_large(self):
            for (elements, answer) in [
                ([0] * 5000 + [1] * 5000, 0)
            ]:
                self.assertEqual(
                    majority_element(elements),
                    answer
                )


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from majority_element import majority_element


    def reference(elements):
        table = {}
        for e in elements:
            if e in table:
                table[e] += 1
            else:
                table[e] = 1

        for e in table:
            if table[e] > len(elements) / 2:
                return 1

        return 0


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("majority_element_unit_tests.py")

        all_tests_passed = True
        for elements, answer in [
            ([1, 1, 2], 1),
            ([1, 2], 0),
            ([7, 8, 7], 1),
        ]:
            if majority_element(elements) != answer:
                all_tests_passed = False
                failed("Wrong answer for elements={}".format(elements))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions
status: Unchecked
record: -1
