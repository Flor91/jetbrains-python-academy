type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from collecting_signatures import compute_optimal_points, Segment


    def reference(segments):
        points = []
        segments = sorted(segments, key=lambda x: x.end)
        limit = -1
        for segment in segments:
            if limit < segment.start:
                limit = segment.end
                points.append(segment.end)
        return points


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("collecting_signatures_unit_tests.py")

        all_tests_passed = True
        for segments in [
            [Segment(48, 90), Segment(1, 60), Segment(49, 51), Segment(18, 80)]
        ]:
            if reference(segments) != compute_optimal_points(segments):
                all_tests_passed = False
                failed("Wrong answer for segments: {}".format(segments))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: collecting_signatures.py
  visible: true
  placeholders:
  - offset: 158
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 158
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3

    from collections import namedtuple
    from sys import stdin

    Segment = namedtuple('Segment', 'start end')


    def compute_optimal_points(segments):
        type here


    if __name__ == '__main__':
        n, *data = map(int, stdin.read().split())
        input_segments = list(map(lambda x: Segment(x[0], x[1]), zip(data[::2], data[1::2])))
        assert n == len(input_segments)
        output_points = compute_optimal_points(input_segments)
        print(len(output_points))
        print(*output_points)
  learner_created: false
- name: collecting_signatures_unit_tests.py
  visible: true
  placeholders:
  - offset: 342
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 342
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from collecting_signatures import compute_optimal_points, Segment


    class CollectingSignatures(unittest.TestCase):
        def test(self):
            for (segments, answer) in [
                ([Segment(1, 3), Segment(2, 5), Segment(3, 6)], 1),
                ([Segment(4, 7), Segment(1, 3), Segment(2, 5), Segment(5, 6)], 2),
                type here
            ]:
                self.assertEqual(len(compute_optimal_points(segments)), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions
status: Unchecked
record: -1
